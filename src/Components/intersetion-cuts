// *** FUNCTIONS
  const observer = new IntersectionObserver(
    entries => {
      entries.forEach(entry => {
        // if (entry.isIntersecting) {
        // if (entry.intersectionRatio === 1) {
        //   console.log(
        //     "_____EXIT:",
        //     post.header.htmlTitle.fullTitle,
        //     entry.intersectionRatio
        //     // entry.isIntersecting
        //   );
        // }
        // if (entry.intersectionRatio == 0) {
        navigationStyle.set(post.header.htmlTitle.fullTitle);

        // DOWN: LEAVING
        // UP: ENTERING

        console.log(
          "_____EXIT",
          post.header.htmlTitle.fullTitle,
          entry.intersectionRatio,
          entry
          // entry.isIntersecting
        );
        // }

        // else {
        //   navigationStyle.set(post.header.htmlTitle.fullTitle);
        //   console.log(
        //     "_____XXXX",
        //     post.header.htmlTitle.fullTitle,
        //     entry.intersectionRatio,
        //     entry
        //     // entry.isIntersecting
        //   );
        // }
        // else {
        //   console.log(
        //     "*****ENTRY:",
        //     post.header.htmlTitle.fullTitle,
        //     entry.intersectionRatio
        //     // entry.isIntersecting
        //   );
        // }

        // console.log("case 1");
        // console.log(entry.intersectionRatio);
        // active = true;
        // observer.disconnect();
        // }
      });
    },
    { threshold: thresholdArray(20) }
  );


    // const observer = new IntersectionObserver(
  //   entries => {
  //     entries.forEach(entry => {
  //       const currentY = entry.boundingClientRect.y;
  //       const currentRatio = entry.intersectionRatio;
  //       const isIntersecting = entry.isIntersecting;

  //       // currentWindowHeight = window.innerHeight;
  //       console.log(entry.boundingClientRect.y);

  //       // console.log("currentWindowHeight:", currentWindowHeight);
  //       // console.log("previousWindowHeight:", previousWindowHeight);

  //       // if (entry.intersectionRatio === 0) {
  //       //   console.log(post.header.htmlTitle.fullTitle, "ENTER");
  //       // } else {
  //       //   console.log(post.header.htmlTitle.fullTitle, "LEAVE");
  //       // }

  //       // Scrolling down/up
  //       if (currentY < previousY) {
  //         if (currentRatio > previousRatio && isIntersecting) {
  //           // console.log("Scrolling down enter", currentRatio);
  //           if (currentRatio > 0.9) {
  //             console.log(entry.boundingClientRect.y);
  //             console.log(entry.boundingClientRect.height);
  //             console.log(post.header.htmlTitle.fullTitle, currentRatio);
  //             console.dir(entry);
  //             console.log("TRUE DOWN ENTER");
  //             // fullyInView = true;
  //             navigationStyle.set(post.header.htmlTitle.fullTitle);
  //           }
  //         } else {
  //           // console.log("Scrolling down leave", currentRatio);
  //           if (currentRatio < 0.2) {
  //             console.log("TRUE DOWN LEAVE");
  //             console.dir(entry);
  //             navigationStyle.set('TRUE DOWN LEAVE"');
  //             // navigationStyle.set("leave down");
  //           }
  //         }
  //       } else if (currentY > previousY && isIntersecting) {
  //         if (currentRatio < previousRatio) {
  //           // console.log("Scrolling up leave", currentRatio);
  //           if (currentRatio > 0.95) {
  //             console.log("TRUE UP LEAVE");
  //             // navigationStyle.set("leave up");
  //           }
  //         } else {
  //           // console.log("Scrolling up enter", currentRatio);

  //           if (currentRatio < 0.1) {
  //             console.log("TRUE UP ENTER");
  //             navigationStyle.set(post.header.htmlTitle.fullTitle);
  //           }
  //         }
  //       }

  //       window.innerHeight;
  //       previousY = currentY;
  //       previousRatio = currentRatio;
  //     });
  //   },
  //   { threshold: [0, 1], rootMargin: "-80px" }
  // );


      // let srcPortrait = url + "?w=1200" + portraitParams;

    // // Generate srcset
    // let srcsetPortrait = ["", 600, 800, 1000, 1200, 1400, 1600, 2000].reduce(
    //   (result, size) => {
    //     return (
    //       result + url + "?w=" + size + portraitParams + " " + size + "w, "
    //     );
    //   }
    // );

    // TODO: picture element

    // console.dir(srcset);



     // let scrollListener;
  // let distance;

  // const thresholdArray = steps =>
  //   Array(steps + 1)
  //     .fill(0)
  //     .map((_, index) => index / steps || 0);
  // let previousY = 0;
  // let previousRatio = 0;
  // let fullyInView = false;

  // *** REACTIVE
  // $: {
  //   console.log(post.header.htmlTitle.fullTitle, distance);
  //   if (distance < 40) {
  //     navigationStyle.set(!post.header.previewColor);
  //   }
  // }


          // console.log(entry);

        // if (entry.intersectionRatio > 0.9) {
        //   console.log(entry.boundingClientRect.y);
        //   console.log(entry.boundingClientRect.height);
        //   console.log(post.header.htmlTitle.fullTitle, currentRatio);
        //   console.dir(entry);
        //   console.log("TRUE DOWN ENTER");
        //   // fullyInView = true;
        //   navigationStyle.set(post.header.htmlTitle.fullTitle);
        // }


        // console.log(entry.boundingClientRect.y);
        // console.log(entry.boundingClientRect.height);
        // if (entry.boundingClientRect.y > 0) {
        //   console.log(post.header.htmlTitle.fullTitle);
        //   console.log("ENTERING VIEW");
        //   // fullyInView = true;
        //   navigationStyle.set(post.header.htmlTitle.fullTitle);
        // } else {
        //   console.log(entry.boundingClientRect.y);
        //   console.log(entry.boundingClientRect.height);
        //   console.log(post.header.htmlTitle.fullTitle);
        //   console.log("LEAVING VIEW");
        //   // fullyInView = true;
        //   navigationStyle.set(post.header.htmlTitle.fullTitle);
        // }
        // }


            // if (
    //   post.header.htmlTitle.fullTitle ===
    //   "Mirage Club by ECAL x Golgotha at Paris Photo 2018, seen by Vincent Catel"
    // ) {
    observer.observe(previewEl);
    // }